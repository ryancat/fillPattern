(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("fillPattern", [], factory);
	else if(typeof exports === 'object')
		exports["fillPattern"] = factory();
	else
		root["fillPattern"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/fillPattern.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/fillPattern.ts":
/*!****************************!*\
  !*** ./src/fillPattern.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// my awesom library
var types_1 = __webpack_require__(/*! ./types */ "./src/types.ts");
var util_1 = __importDefault(__webpack_require__(/*! ./util */ "./src/util.ts"));
// import svgRenderer from './renderers/svg'
var canvas_1 = __importDefault(__webpack_require__(/*! ./renderers/canvas */ "./src/renderers/canvas.ts"));
var fillPatternState_1 = __importDefault(__webpack_require__(/*! ./fillPatternState */ "./src/fillPatternState.ts"));
var Base_1 = __importDefault(__webpack_require__(/*! ./textures/Base */ "./src/textures/Base.ts"));
var Line_1 = __importDefault(__webpack_require__(/*! ./textures/Line */ "./src/textures/Line.ts"));
/***** Util functions *****/
/**
 * Get the hash for given fill pattern config.
 * The hash result is used to decide if given config is in cached patterns.
 * @param patternConfig fill pattern config
 * @returns string hash value
 */
function getHash(patternConfig, rendererType) {
    return rendererType + "-" + JSON.stringify(patternConfig);
}
var fillPattern = {
    RendererType: types_1.RendererType,
    TextureModeType: types_1.TextureModeType,
    loadTexture: function (texture) {
        if (!fillPatternState_1.default.textureMap[texture.name]) {
            // util.applyMixins(texture, [BaseTexture])
            // util.mixin(texture, new BaseTexture())
            fillPatternState_1.default.textureMap[texture.name] = new Base_1.default(texture);
        }
        else {
            throw new Error("Duplicated texture name: " + texture.name);
        }
    },
    /**
     * Get texture from the pattern config
     * @param patternConfig fill pattern config
     * @returns canvas pattern that can be used for fill instruction
     */
    getTexture: function (patternConfig, rendererType) {
        var hashKey = getHash(patternConfig, rendererType);
        var renderer;
        switch (rendererType) {
            case types_1.RendererType.Canvas:
                renderer = canvas_1.default;
                break;
            // case RendererType.SVG:
            //   renderer = svgRenderer
            //   break
            default:
                throw new Error("Unknown renderer type: " + rendererType);
        }
        if (!fillPatternState_1.default.fillPatternCache[hashKey]) {
            var texture = fillPatternState_1.default.textureMap[patternConfig.name];
            if (!texture) {
                throw new Error("No such texture to load: " + patternConfig.name + "\n Please load the texture first!");
            }
            // Draw on the texture recursively and get the expected result
            var textureElement = renderer.getInitTexture(patternConfig.backgroundColor);
            if (!texture.draw) {
                throw new Error("Texture has no pre-defined draw function: " + texture.name);
            }
            texture.draw(textureElement, renderer, {
                mode: patternConfig.mode,
            });
            fillPatternState_1.default.fillPatternCache[hashKey] = textureElement;
        }
        return fillPatternState_1.default.fillPatternCache[hashKey];
    },
    textureModeType: {
        Light: types_1.TextureModeType.Light,
        Medium: types_1.TextureModeType.Medium,
        Heavy: types_1.TextureModeType.Heavy,
    },
};
// Need to load all built-in textures
util_1.default.loadTexture(new Line_1.default());
exports.default = fillPattern;


/***/ }),

/***/ "./src/fillPatternState.ts":
/*!*********************************!*\
  !*** ./src/fillPatternState.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var fillPatternCache = {};
var textureMap = {};
exports.default = {
    fillPatternCache: fillPatternCache,
    textureMap: textureMap,
};


/***/ }),

/***/ "./src/renderers/canvas.ts":
/*!*********************************!*\
  !*** ./src/renderers/canvas.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __importDefault(__webpack_require__(/*! ../util */ "./src/util.ts"));
var canvasRenderer = {
    getInitTexture: function (backgroundColor) {
        var canvas = document.createElement('canvas');
        var context = canvas.getContext('2d');
        if (!context) {
            throw new Error('canvas 2d context is not supported in this browser');
        }
        canvas.width = 2;
        canvas.height = 2;
        context.fillStyle = backgroundColor || 'transparent';
        context.fillRect(0, 0, 2, 2);
        return canvas;
    },
    drawLineTexture: function (canvasTextureElement, textureConfig) {
        if (!canvasTextureElement) {
            throw new Error('No canvas texture element to draw texture with');
        }
        var distance = textureConfig.distance;
        var lineWidth = textureConfig.thickness;
        var rotation = textureConfig.rotation;
        var dimensions = textureConfig.dimensions;
        if (!dimensions) {
            throw new Error('Line texture requires dimensions config');
        }
        var width = dimensions.width;
        var height = dimensions.height;
        // const isFill = textureConfig.isFill
        // const isStroke = textureConfig.isStroke
        var minY = height / 2 - distance;
        var maxY = height / 2 + distance;
        var minX = 0.5 * (width - Math.sqrt(width * width + height * height));
        var maxX = 0.5 * (width + Math.sqrt(width * width + height * height));
        var offsetX = (textureConfig.offsetX || 0) % width;
        var offsetY = (textureConfig.offsetY || 0) % height;
        var textureCanvas = document.createElement('canvas');
        var textureCtx = textureCanvas.getContext('2d');
        if (!textureCtx) {
            throw new Error('canvas 2d context is not supported in this browser');
        }
        textureCanvas.width = Math.floor(width);
        textureCanvas.height = Math.floor(height);
        // Start to draw lines
        // if (isFill) {
        //   textureCtx.fillStyle = config.color
        // }
        // if (isStroke) {
        //   textureCtx.strokeStyle = config.color
        // }
        textureCtx.strokeStyle = textureConfig.color;
        // Rotate texture canvas
        canvasRenderer.rotate(textureCanvas, rotation);
        textureCtx.lineWidth = lineWidth;
        textureCtx.beginPath();
        var y = minY;
        while (y <= maxY) {
            textureCtx.moveTo(minX + offsetX, y + offsetY);
            textureCtx.lineTo(maxX + offsetX, y + offsetY);
            // The canvas will be round down to full pixel dimension, while the calculation
            // assumes we are using the original larger dimensions in fraction of a pixel.
            // This will compensate that.
            y += distance - 0.25;
        }
        textureCtx.stroke();
        // if (isStroke) {
        //   textureCtx.stroke()
        // }
        // if (isFill) {
        //   textureCtx.fill()
        // }
        canvasRenderer.combineTextures(canvasTextureElement, textureCanvas);
    },
    rotate: function (canvasElement, angle, originPosition) {
        var context = canvasElement.getContext('2d');
        if (!context) {
            throw new Error('canvas 2d context is not supported in this browser');
        }
        var width = canvasElement.width;
        var height = canvasElement.height;
        var originX = width / 2;
        var originY = height / 2;
        // Rotate texture canvas
        if (originPosition) {
            originX = originPosition.x;
            originY = originPosition.y;
        }
        context.translate(originX, originY);
        context.rotate(angle);
        context.translate(-originX, -originY);
    },
    combineTextures: function (destinationCanvasTextureElement, sourceCanvasTextureElement) {
        var context = destinationCanvasTextureElement.getContext('2d');
        if (!context) {
            throw new Error('canvas 2d context is not supported in this browser');
        }
        var finalCanvasWidth = destinationCanvasTextureElement.width;
        var finalCanvasHeight = destinationCanvasTextureElement.height;
        var finalCanvas;
        var finalContext;
        context.save();
        // In case we have multiple patterns, we need to use a texture canvas the size of the
        // least common multiplier of width and height of all of them
        finalCanvasWidth = util_1.default.lcm(finalCanvasWidth, sourceCanvasTextureElement.width);
        finalCanvasHeight = util_1.default.lcm(finalCanvasHeight, sourceCanvasTextureElement.height);
        if (finalCanvasWidth === destinationCanvasTextureElement.width &&
            finalCanvasHeight === destinationCanvasTextureElement.height) {
            // the canvas is still fine to use
            context.fillStyle = context.createPattern(sourceCanvasTextureElement, 'repeat');
            context.fillRect(0, 0, finalCanvasWidth, finalCanvasHeight);
        }
        else {
            // we need to update the dimension for the canvas
            finalCanvas = document.createElement('canvas');
            finalCanvas.width = finalCanvasWidth;
            finalCanvas.height = finalCanvasHeight;
            finalContext = finalCanvas.getContext('2d');
            if (!finalContext) {
                throw new Error('canvas 2d context is not supported in this browser');
            }
            // First fill the original texture
            finalContext.fillStyle = finalContext.createPattern(destinationCanvasTextureElement, 'repeat');
            finalContext.fillRect(0, 0, finalCanvasWidth, finalCanvasHeight);
            // Then fill the new texture
            finalContext.fillStyle = finalContext.createPattern(sourceCanvasTextureElement, 'repeat');
            finalContext.fillRect(0, 0, finalCanvasWidth, finalCanvasHeight);
            // Update canvas and reset it to final canvas
            destinationCanvasTextureElement.width = finalCanvasWidth;
            destinationCanvasTextureElement.height = finalCanvasHeight;
            context.clearRect(0, 0, finalCanvasWidth, finalCanvasHeight);
            context.drawImage(finalCanvas, 0, 0);
        }
        context.restore();
    },
    // TODO: In SVG case, the source texture is actually just a svg pattern element
    // // We need to make some changes here to get this part working
    getDataURL: function (canvasTextureElement) { return canvasTextureElement.toDataURL(); },
    getTextureSize: function (canvasTextureElement) {
        return {
            width: canvasTextureElement.width,
            height: canvasTextureElement.height,
        };
    },
};
exports.default = canvasRenderer;


/***/ }),

/***/ "./src/textures/Base.ts":
/*!******************************!*\
  !*** ./src/textures/Base.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../types */ "./src/types.ts");
var fillPatternState_1 = __importDefault(__webpack_require__(/*! ../fillPatternState */ "./src/fillPatternState.ts"));
var BaseTexture = /** @class */ (function () {
    function BaseTexture(textureOptions) {
        this.name = 'baseTexture';
        this.mode = {
            // TODO: How to use enums for the default texture config name?
            default: {
                thickness: 1,
                distance: 3,
                rotation: 0,
                color: '#000000',
                offsetX: 0,
                offsetY: 0,
            },
        };
        Object.assign(this, textureOptions);
    }
    BaseTexture.prototype.draw = function (textureElement, renderer, drawConfig) {
        var mode = drawConfig.mode, config = drawConfig.config;
        var textureConfigs = this.mode[mode || types_1.TextureModeType.Default];
        if (!Array.isArray(textureConfigs)) {
            textureConfigs = [textureConfigs];
        }
        textureConfigs.forEach(function (configDetails) {
            var name = configDetails.name, detailConfigs = __rest(configDetails, ["name"]);
            if (!name) {
                // The pattern mode configs may contain any fill pattern as its children
                // layers. If it does so, it need to include the pattern name in the config
                // details. For basic fill patterns like line, circle or square, they need
                // to override draw function to draw by themselves, hence it should never
                // hit this condition here.
                throw new Error("Do not know how to draw this config: " + name);
            }
            // The config has a pattern name, which means it's composed by
            // other patterns
            var childTexture = fillPatternState_1.default.textureMap[name];
            if (!childTexture) {
                throw new Error("No such texture exist: " + name);
            }
            if (!childTexture.draw) {
                throw new Error("Cannot draw texture: " + name);
            }
            childTexture.draw(textureElement, renderer, {
                mode: mode,
                // We got some problem here
                // Should the config pass down to the grand children?
                config: Object.assign({}, detailConfigs, config),
            });
        });
    };
    return BaseTexture;
}());
exports.default = BaseTexture;


/***/ }),

/***/ "./src/textures/Line.ts":
/*!******************************!*\
  !*** ./src/textures/Line.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../types */ "./src/types.ts");
var base_1 = __importDefault(__webpack_require__(/*! ./base */ "./src/textures/base.ts"));
var DEFAULT_PATTERN_SIZE = 10;
function calculateDimensions(distance, rotation) {
    var width;
    var height;
    rotation = rotation % Math.PI;
    if (rotation === 0) {
        width = DEFAULT_PATTERN_SIZE;
        height = distance;
    }
    else if (rotation === Math.PI * 0.5) {
        width = distance;
        height = DEFAULT_PATTERN_SIZE;
    }
    else {
        width = distance / Math.sin(rotation);
        height = distance / Math.abs(Math.cos(rotation));
    }
    return {
        height: height,
        width: width,
    };
}
var lightModeTexture = {
    color: '#000000',
    distance: 4,
    rotation: 0,
    thickness: 1,
};
var mediumModeTexture = {
    color: '#000000',
    distance: 4,
    rotation: 0,
    thickness: 2,
};
var heavyModeTexture = {
    color: '#000000',
    distance: 4,
    rotation: 0,
    thickness: 3,
};
var LineTexture = /** @class */ (function (_super) {
    __extends(LineTexture, _super);
    function LineTexture() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'line';
        _this.mode = {
            // TODO: How to use enums for the default texture config name?
            default: mediumModeTexture,
            light: lightModeTexture,
            medium: mediumModeTexture,
            heavy: heavyModeTexture,
        };
        return _this;
    }
    LineTexture.prototype.draw = function (textureElement, renderer, drawConfig) {
        var mode = drawConfig.mode, config = drawConfig.config;
        var textureConfig = Object.assign({}, 
        // TODO: default to the medium mode, but it should really be some fallback mode
        this.mode[mode || types_1.TextureModeType.Medium], config);
        textureConfig.dimensions = textureConfig.dimensions ||
            calculateDimensions(textureConfig.distance, textureConfig.rotation);
        renderer.drawLineTexture(textureElement, textureConfig);
    };
    return LineTexture;
}(base_1.default));
exports.default = LineTexture;


/***/ }),

/***/ "./src/textures/base.ts":
/*!******************************!*\
  !*** ./src/textures/base.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../types */ "./src/types.ts");
var fillPatternState_1 = __importDefault(__webpack_require__(/*! ../fillPatternState */ "./src/fillPatternState.ts"));
var BaseTexture = /** @class */ (function () {
    function BaseTexture(textureOptions) {
        this.name = 'baseTexture';
        this.mode = {
            // TODO: How to use enums for the default texture config name?
            default: {
                thickness: 1,
                distance: 3,
                rotation: 0,
                color: '#000000',
                offsetX: 0,
                offsetY: 0,
            },
        };
        Object.assign(this, textureOptions);
    }
    BaseTexture.prototype.draw = function (textureElement, renderer, drawConfig) {
        var mode = drawConfig.mode, config = drawConfig.config;
        var textureConfigs = this.mode[mode || types_1.TextureModeType.Default];
        if (!Array.isArray(textureConfigs)) {
            textureConfigs = [textureConfigs];
        }
        textureConfigs.forEach(function (configDetails) {
            var name = configDetails.name, detailConfigs = __rest(configDetails, ["name"]);
            if (!name) {
                // The pattern mode configs may contain any fill pattern as its children
                // layers. If it does so, it need to include the pattern name in the config
                // details. For basic fill patterns like line, circle or square, they need
                // to override draw function to draw by themselves, hence it should never
                // hit this condition here.
                throw new Error("Do not know how to draw this config: " + name);
            }
            // The config has a pattern name, which means it's composed by
            // other patterns
            var childTexture = fillPatternState_1.default.textureMap[name];
            if (!childTexture) {
                throw new Error("No such texture exist: " + name);
            }
            if (!childTexture.draw) {
                throw new Error("Cannot draw texture: " + name);
            }
            childTexture.draw(textureElement, renderer, {
                mode: mode,
                // We got some problem here
                // Should the config pass down to the grand children?
                config: Object.assign({}, detailConfigs, config),
            });
        });
    };
    return BaseTexture;
}());
exports.default = BaseTexture;


/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/***** Enums *****/
var RendererType;
(function (RendererType) {
    RendererType[RendererType["Canvas"] = 0] = "Canvas";
    RendererType[RendererType["SVG"] = 1] = "SVG";
})(RendererType = exports.RendererType || (exports.RendererType = {}));
var TextureModeType;
(function (TextureModeType) {
    TextureModeType[TextureModeType["Light"] = 0] = "Light";
    TextureModeType[TextureModeType["Medium"] = 1] = "Medium";
    TextureModeType[TextureModeType["Heavy"] = 2] = "Heavy";
    TextureModeType[TextureModeType["Default"] = 3] = "Default";
})(TextureModeType = exports.TextureModeType || (exports.TextureModeType = {}));


/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fillPatternState_1 = __importDefault(__webpack_require__(/*! ./fillPatternState */ "./src/fillPatternState.ts"));
var gcdCache = {};
var util = {
    gcd: function (number1, number2) {
        if (typeof number1 !== 'number' || typeof number2 !== 'number' ||
            (Number.isNaN || isNaN)(number1) || (Number.isNaN || isNaN)(number2) ||
            number1 <= 0 || number2 <= 0) {
            return -1;
        }
        var key1 = number1 + '-' + number2;
        var key2 = number2 + '-' + number1;
        if (gcdCache[key1]) {
            return gcdCache[key1];
        }
        if (number1 !== number2) {
            if (number1 > number2) {
                number1 = number1 - number2;
            }
            else {
                number2 = number2 - number1;
            }
            gcdCache[key1] = util.gcd(number1, number2);
            gcdCache[key2] = gcdCache[key1];
            return gcdCache[key1];
        }
        else {
            gcdCache[key1] = number1;
            return number1;
        }
    },
    lcm: function (number1, number2) {
        if (typeof number1 !== 'number' || typeof number2 !== 'number' ||
            (Number.isNaN || isNaN)(number1) || (Number.isNaN || isNaN)(number2) ||
            number1 <= 0 || number2 <= 0) {
            return -1;
        }
        return number1 * number2 / util.gcd(number1, number2);
    },
    mixin: function (destinationObj, sourceObj) {
        var key;
        for (key in sourceObj) {
            if (sourceObj.hasOwnProperty(key)) {
                if (!destinationObj.hasOwnProperty(key)) {
                    destinationObj[key] = sourceObj[key];
                }
            }
        }
    },
    applyMixins: function (derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                derivedCtor.prototype[name] = baseCtor.prototype[name];
            });
        });
    },
    loadTexture: function (texture) {
        if (!fillPatternState_1.default.textureMap[texture.name]) {
            // util.applyMixins(texture, [BaseTexture])
            // util.mixin(texture, new BaseTexture())
            fillPatternState_1.default.textureMap[texture.name] = texture;
        }
        else {
            throw new Error("Duplicated texture name: " + texture.name);
        }
    },
};
exports.default = util;


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,